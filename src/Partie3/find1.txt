// Génère une matrice des candidats possibles pour chaque position de clé
void find_possible_keys(const unsigned char *encrypted_msg, size_t msg_len, 
                        size_t key_len, unsigned char candidates[key_len][ALPHABET_SIZE + 1]) {
    const char *alphabet = ALPHABET;

    // Initialiser les candidats
    for (size_t i = 0; i < key_len; i++) {
        size_t pos = 0;
        for (size_t j = 0; j < ALPHABET_SIZE; j++) {
            // Calculer le caractère déchiffré
            char decrypted = encrypted_msg[i % msg_len] ^ alphabet[j];

            // Si le caractère déchiffré est valide, on l'ajoute à la liste
            if (is_valid_char(decrypted)) {
                candidates[i][pos++] = alphabet[j];
            }
        }
        candidates[i][pos] = '\0'; // Terminer la ligne par un caractère nul
    }
}